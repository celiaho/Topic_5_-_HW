/* *****************************************
 *  File : Topic_5_HW.java
 *  Author : Celia Ho  
 *  Last Modified : Thu 18 April 2024
 *  Description : Create a JavaFX application with a primary stage with a BorderPane layout. The 
 *  title of primary stage should be your name. 
 *  The TOP part of the border pane should have a label of "Shape: "; a combobox with a choice of 
 *  "choose one", "circle", "square", or "triangle"; a label of "Color"; and a combobox of "choose 
 *  one", "red", "green", "blue", "yellow", "white", "black".
 *  When the user selects the shape, the shape is drawn in the CENTER part of the border pane 
 *  layout, centered appropriately. When the user selects a color, the shape is filled with that 
 *  color. YOU WILL NOTE THERE IS NO BUTTON TO CAUSE THE ACTIONS. 
 *  Do not forget to clear the shapes when a new shape is selected. 
 * 
 *  ACADEMIC HONESTY DISCLOSURE: I used Gemini to figure out how to get the color of my shapes to 
 *  persist after selecting a new shape. The code for the getSelectedColor method was generated by 
 *  Gemini; the comments and integration into the rest of the program are mine. Citation: Gemini. 
 *  (2024, April 18). "I took out the lines setting the stroke color in the handlerShapeSelection 
 *  function. Why do my shapes appear black when I select new shapes from the cbColor combo box?" &
 *  "How do I implement the getSelectedColor method?." Generated using Google AI. 
 *  https://gemini.google.com/
* *****************************************/

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Polygon;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.Shape;
import javafx.stage.Stage;

public class Topic_5_HW extends Application {
    
    // Declare class fields for scene
    BorderPane borderPane;
    ComboBox<String> cbShape;
    ComboBox<String> cbColor;
    VBox vboxForCBs;
    VBox vboxForShapes;
    Shape shape;
    
    // Main method
    public static void main(String[] args) throws Exception {
        launch(args);
    }
    
    // Override the start method in the Application class
    @Override 
    public void start(Stage primaryStage) {
        // Create a border pane to hold labels/comboboxes and shapes
        borderPane = new BorderPane();

        // Create VBox for Top BorderPane Region
        VBox vboxForCBs = new VBox();
        // Set padding for Combo Box VBox
        vboxForCBs.setPadding(new Insets(11, 12, 13, 14));

        // ***Shape Combo Box and Labels***
        // Create Shape label
        Label shapeLabel = new Label("Shape: ");
        // Create a combo box with a choice of "choose one", "circle", "square", or "triangle"
        cbShape = new ComboBox<String>();
        cbShape.getItems().addAll("Choose one", "Circle", "Square", "Triangle");
        cbShape.setValue("Choose one");   
        // Register the event handler (e -> handlerShapeSelection()) with the Shape Combo Box: When a combo box selection is made, have the handler call the handlerShapeSelection method and pass the ActionEvent argument e to it
        cbShape.setOnAction(e -> handlerShapeSelection());
        
        // ***Color Combo Box and Labels***
        // Create Color label
        Label colorLabel = new Label("Color: ");
        // Create a combo box of "Choose one", "red", "green", "blue", "yellow", "white", "black"
        System.out.print("\t");
        cbColor = new ComboBox<String>();
        cbColor.getItems().addAll("Choose one", "Red", "Green", "Blue", "Yellow", "White", "Black");
        cbColor.setValue("Choose one");
        // Register the event handler with the Color Combo Box: When a combo box selection is made, have the handler call the handlerColorSelection method and pass the ActionEvent argument e to it
        cbColor.setOnAction(e -> handlerColorSelection());

        // ***Configure Border Pane***
        // Add label/combo box widgets to ComboBox vbox
        vboxForCBs.getChildren().addAll(shapeLabel, cbShape, colorLabel, cbColor);
        // Set ComboBox node in BorderPane top region
        borderPane.setTop(vboxForCBs);
        // Set Shapes node in BorderPane center region 
        borderPane.setCenter(vboxForShapes);  

        // Create a scene and place it in the stage
        Scene scene = new Scene(borderPane, 350, 350); // Create scene (width, length)
        primaryStage.setTitle("Celia Ho");  // Set the stage title
        primaryStage.setScene(scene);   // Place the scene in the stage
        primaryStage.show();    // Display the stage
    }


        // ***Method to get previous color selection (Note Academic Integrity Disclosure in beginning code block.)***
        public Color getSelectedColor() {
            // Create a string variable to hold the selected color value from the Color Combo Box
            String selectedColor = cbColor.getValue();
            // If no color has been selected...
            if (selectedColor.equals("Choose one") || selectedColor == null) {
                // ...return the color "Transparent"...
                return Color.TRANSPARENT;
            } else {
                // Convert the string value from the combo box to a Color object and return the color
                return Color.valueOf(selectedColor);
            }
        }
        
        // ***Define event handler for Shape Combo Box selection***
        public void handlerShapeSelection() {
            if (cbShape.getValue().equals("Circle")) {
                shape = new Circle(75);
                shape.setStroke(Color.BLACK);
                // Set the shape's fill color to the last selected color (or transparent if no color has been selected)
                shape.setFill(getSelectedColor());
            }
            else if (cbShape.getValue().equals("Square")) {
                shape = new Rectangle();
                ((Rectangle)shape).setWidth(150);
                ((Rectangle)shape).setHeight(150);
                shape.setStroke(Color.BLACK);
                shape.setFill(getSelectedColor());
            }
            else if (cbShape.getValue().equals("Triangle")) {
                Polygon triangle = new Polygon();
                shape = triangle;   // Declare triangle as a shape since it's not included in JavaFX's shape class
                triangle.getPoints().addAll(new Double[] {250.00, 50.00, 150.00, 200.00, 350.00, 200.00});
                shape.setStroke(Color.BLACK);
                shape.setFill(getSelectedColor());
            }
            else {
                shape = null;   // Clear the shape
            }

            // Set shape widget in BorderPane center region 
            borderPane.setCenter(shape);
        }
        
        // ***Define event handler for Color Combo Box selection***
        public void handlerColorSelection() {
            if (cbColor.getValue().equals("Red")) {
                shape.setFill(Color.RED);
            }
            else if (cbColor.getValue().equals("Green")) {
                shape.setFill(Color.GREEN);
            }
            else if (cbColor.getValue().equals("Blue")) {
                shape.setFill(Color.BLUE);
            }
            else if (cbColor.getValue().equals("Yellow")) {
                shape.setFill(Color.YELLOW);
            }
            else if (cbColor.getValue().equals("White")) {
                shape.setFill(Color.WHITE);
            }
            else if (cbColor.getValue().equals("Black")) {
                shape.setFill(Color.BLACK);
            }
            else {
                shape.setFill(Color.TRANSPARENT);
            }
        }

        /* 
        // This is an alternate way to define an event handler.
        class ShapeHandlerClass implements EventHandler<ActionEvent> {
            @Override
            public void handle(ActionEvent e) {
                // Do shape stuff
                System.out.println("Shape selected");
            }
        }
        */
    }